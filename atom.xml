<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michaela</title>
  <subtitle>米迦列天使</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.devheminghui.cn/"/>
  <updated>2017-01-08T15:15:08.000Z</updated>
  <id>http://www.devheminghui.cn/</id>
  
  <author>
    <name>heminghui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何使用hexo搭建个人站</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-24/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-24/</id>
    <published>2017-01-08T15:15:08.000Z</published>
    <updated>2017-01-08T15:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo是基于Node.js的静态网页生成工具，对不具有前端技术经验的童鞋来说，也能很好的搭建个人站</p>
<h3 id="第一步：准备"><a href="#第一步：准备" class="headerlink" title="第一步：准备"></a>第一步：准备</h3><ol>
<li>安装<code>hexo</code>之前，需要先安装好<code>Node.js</code>,安装Node只需要去官网下载相应安装文件安装即可，推荐下载最新的版本；</li>
<li>安装<code>Git</code>(Mac自带了已经)</li>
<li>备好<code>github</code>账号，最好配置好<code>SSH Keys</code>（不懂如何配置ssh的童鞋，<a href="http://www.cnblogs.com/ayseeing/p/3572582.html" target="_blank" rel="external">这里看</a>）</li>
</ol>
<h3 id="第二步：本地化"><a href="#第二步：本地化" class="headerlink" title="第二步：本地化"></a>第二步：本地化</h3><ol>
<li><p>安装<code>Hexo</code></p>
 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g hexo</div></pre></td></tr></table></figure>
</li>
<li><p>初始化<code>Hexo</code>，指定一个目录执行命令</p>
 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init</span></div></pre></td></tr></table></figure>
</li>
<li><p>生成静态页面，在初始化的目录执行命令</p>
 <figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo  <span class="keyword">generate</span>  或者 hexo g</div></pre></td></tr></table></figure>
</li>
</ol>
<p>执行生成静态页面命令之前，最好先执行下面命令，清除缓存，,避免不必要的奇怪问题</p>
<pre><code><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo clean</span></div></pre></td></tr></table></figure>
</code></pre><p>生成的静态页面在<code>hexo/public</code> 目录中</p>
<ol>
<li><p>本地启动，启动本地<code>service</code>，进行本地预览和调试</p>
 <figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span>  或者 hexo s</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这步可能会提示各种错误，最常见的错误和解决办法如下</p>
<pre><code><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">错误：ERROR Plugin <span class="keyword">load</span> <span class="keyword">failed</span>: hexo-<span class="keyword">server</span></div><div class="line">解决方法，执行命令: sudo npm <span class="keyword">install</span> hexo-<span class="keyword">server</span></div><div class="line"></div><div class="line">错误： <span class="keyword">Usage</span>: hexo ...</div><div class="line">解决方法，执行命令： npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></div></pre></td></tr></table></figure>
</code></pre><h3 id="第三步：发布到远程GitHub"><a href="#第三步：发布到远程GitHub" class="headerlink" title="第三步：发布到远程GitHub"></a>第三步：发布到远程GitHub</h3><ol>
<li>新建远程仓库，注意仓库名称必须为：<code>your_github_userName.github.io</code> 固定写法    </li>
<li><p>接下来，我们需要修改<code>_config.yml</code>来和远程仓库建立关联，在文件下面修改为</p>
 <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">   <span class="attribute">type</span>: git </div><div class="line">   <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/leopardpan/your_github_userName.github.io.git </span></div><div class="line">   <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：如果你使用了<code>SSH</code>，写法稍有不同，应该写成</p>
<pre><code><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:your_github_userName/your_github_userName.github.io.git</div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>最后执行如下命令，将本地文件发布到远程<code>github</code>仓库</p>
 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo deploy</span></div></pre></td></tr></table></figure>
<p> 浏览器中打开 <code>http://your_github_userName.github.io/</code> ,搭建基本完成</p>
</li>
</ol>
<h3 id="第四步：其他配置"><a href="#第四步：其他配置" class="headerlink" title="第四步：其他配置"></a>第四步：其他配置</h3><ul>
<li>配置主题<br>可以找几个不错的主题来试试，我个人使用的是相对简洁的<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>，相关的hexo主题有很多，这里附上推荐链接：<br><a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">https://www.zhihu.com/question/24422335</a></li>
</ul>
<ul>
<li>域名及域名解析服务：<br>我使用的域名是在万网申请的，域名解析服务是<a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod</a><br>关于域名绑定的问题推荐阅读：<br><a href="http://www.jianshu.com/p/1d427e888dda" target="_blank" rel="external">http://www.jianshu.com/p/1d427e888dda</a></li>
<li><p>评论系统<br>hexo支持多说，大多数个人站用的页比较多,所以直接就用多说了</p>
</li>
<li><p>图床<br>直接在目录中放图片也是可以的，不过考虑到加载速度，还是使用图床效果好点，国内用户推荐使用<a href="http://www.qiniu.com/cdnjiangjia?utm_campaign=cdnjiangjia&amp;utm_source=baidu&amp;utm_medium=advposition&amp;utm_content=png" target="_blank" rel="external">七牛</a>，可翻墙用户使用<code>google photos</code>方便一些。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo是基于Node.js的静态网页生成工具，对不具有前端技术经验的童鞋来说，也能很好的搭建个人站&lt;/p&gt;
&lt;h3 id=&quot;第一步：准备&quot;&gt;&lt;a href=&quot;#第一步：准备&quot; class=&quot;headerlink&quot; title=&quot;第一步：准备&quot;&gt;&lt;/a&gt;第一步：准备&lt;/h3
    
    </summary>
    
      <category term="网站" scheme="http://www.devheminghui.cn/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="Hexo" scheme="http://www.devheminghui.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>动画时间</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-23/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-23/</id>
    <published>2017-01-08T15:14:07.000Z</published>
    <updated>2017-01-08T15:14:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="全局时间和本地时间S"><a href="#全局时间和本地时间S" class="headerlink" title="全局时间和本地时间S"></a>全局时间和本地时间S</h3><p>CoreAnimation有一个全局时间的概念，也就是所谓的<strong>马赫时间</strong>（“马赫”实际上是iOS和Mac OS系统内核的命名）。马赫时间在设备上所有进程都是全局的–但是在不同设备上并不是全局的–不过这已经足够对动画的参考点提供便利了，你可以使用CACurrentMediaTime函数来访问马赫时间：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CFTimeInterval time</span> = CACurrentMediaTime();</div></pre></td></tr></table></figure>
<p>这个函数返回的值其实无关紧要（它返回了设备自从上次启动后的秒数，并不是你所关心的），它真实的作用在于对动画的时间测量提供了一个相对值。注意当设备休眠的时候马赫时间会暂停，也就是所有的CAAnimations（基于马赫时间）同样也会暂停。</p>
<p>每个CALayer和CAAnimation实例都有自己本地时间的概念，是根据父图层/动画层级关系中的beginTime，timeOffset和speed属性计算。就和转换不同图层之间坐标关系一样，CALayer同样也提供了方法来转换不同图层之间的本地时间。如下：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(CFTimeInterval)</span>convertTime:<span class="params">(CFTimeInterval)</span>t fromLayer:<span class="params">(CALayer *)</span>l; </div><div class="line">- <span class="params">(CFTimeInterval)</span>convertTime:<span class="params">(CFTimeInterval)</span>t toLayer:<span class="params">(CALayer *)</span>l;</div></pre></td></tr></table></figure>
<p>当用来同步不同图层之间有不同的speed，timeOffset和beginTime的动画，这些方法会很有用。</p>
<h2 id="暂停，倒回和快进"><a href="#暂停，倒回和快进" class="headerlink" title="暂停，倒回和快进"></a>暂停，倒回和快进</h2><p>设置动画的speed属性为0可以暂停动画，但在动画被添加到图层之后不太可能再修改它了，所以不能对正在进行的动画使用这个属性。给图层添加一个<code>CAAnimation</code>实际上是给动画对象做了一个不可改变的拷贝，所以对原始动画对象属性的改变对真实的动画并没有作用。相反，直接用<code>-animationForKey:</code>来检索图层正在进行的动画可以返回正确的动画对象，但是修改它的属性将会抛出异常。<br>如果移除图层正在进行的动画，图层将会急速返回动画之前的状态。但如果在动画移除之前拷贝呈现图层到模型图层，动画将会看起来暂停在那里。但是不好的地方在于之后就不能再恢复动画了。<br>一个简单的方法是可以利用<code>CAMediaTiming</code>来暂停图层本身。如果把图层的speed设置成0，它会暂停任何添加到图层上的动画。类似的，设置<code>speed</code>大于1.0将会快进，设置成一个负值将会倒回动画。<br>通过增加主窗口图层的speed，可以暂停整个应用程序的动画。这对UI自动化提供了好处，我们可以加速所有的视图动画来进行自动化测试（注意对于在主窗口之外的视图并不会被影响，比如UIAlertview）。可以在app delegate设置如下进行验证：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.window.layer.speed = <span class="number">100</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>你也可以通过这种方式来减速，但其实也可以在模拟器通过切换慢速动画来实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;全局时间和本地时间S&quot;&gt;&lt;a href=&quot;#全局时间和本地时间S&quot; class=&quot;headerlink&quot; title=&quot;全局时间和本地时间S&quot;&gt;&lt;/a&gt;全局时间和本地时间S&lt;/h3&gt;&lt;p&gt;CoreAnimation有一个全局时间的概念，也就是所谓的&lt;strong&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="动画" scheme="http://www.devheminghui.cn/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Carthage包管理体验及常见swift库</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-21/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-21/</id>
    <published>2017-01-08T15:13:52.000Z</published>
    <updated>2017-01-08T15:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>CoaoaPods 是一套整体解决方案，我们在 Podfile 中指定好我们需要的第三方库。然后 CocoaPods 就会进行下载，集成，然后修改或者创建我们项目的 workspace 文件，这一系列整体操作。</p>
<p>相比之下，Carthage 就要轻量很多，它也会一个叫做 Cartfile 描述文件，但 Carthage 不会对我们的项目结构进行任何修改，更不多创建 workspace。它只是根据我们描述文件中配置的第三方库，将他们下载到本地，然后使用 xcodebuild 构建成 framework 文件。然后由我们自己将这些库集成到项目中。Carthage 使用的是一种<strong>非侵入性</strong>的哲学。</p>
<p>具体使用如下：<a href="http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/" target="_blank" rel="external">http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/</a></p>
<h4 id="常见swift第三方库-会不断更新"><a href="#常见swift第三方库-会不断更新" class="headerlink" title="常见swift第三方库(会不断更新)"></a>常见swift第三方库(会不断更新)</h4><p><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a>（swift版的AFN）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CoaoaPods 是一套整体解决方案，我们在 Podfile 中指定好我们需要的第三方库。然后 CocoaPods 就会进行下载，集成，然后修改或者创建我们项目的 workspace 文件，这一系列整体操作。&lt;/p&gt;
&lt;p&gt;相比之下，Carthage 就要轻量很多，它也会
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 8 新特性</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-20/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-20/</id>
    <published>2017-01-08T15:13:39.000Z</published>
    <updated>2017-01-08T15:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何消除Xcode-8-自带打印的日志"><a href="#如何消除Xcode-8-自带打印的日志" class="headerlink" title="如何消除Xcode 8 自带打印的日志"></a>如何消除Xcode 8 自带打印的日志</h3><p><a href="http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs" target="_blank" rel="external">http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何消除Xcode-8-自带打印的日志&quot;&gt;&lt;a href=&quot;#如何消除Xcode-8-自带打印的日志&quot; class=&quot;headerlink&quot; title=&quot;如何消除Xcode 8 自带打印的日志&quot;&gt;&lt;/a&gt;如何消除Xcode 8 自带打印的日志&lt;/h3&gt;&lt;p&gt;&lt;a
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Xcode 8" scheme="http://www.devheminghui.cn/tags/Xcode-8/"/>
    
  </entry>
  
  <entry>
    <title>Swift/OC混编之道</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-20-1/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-20-1/</id>
    <published>2017-01-08T15:13:10.000Z</published>
    <updated>2017-01-08T15:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在Swift项目中使用OC，在OC项目中使用Swift"><a href="#在Swift项目中使用OC，在OC项目中使用Swift" class="headerlink" title="在Swift项目中使用OC，在OC项目中使用Swift"></a>在Swift项目中使用OC，在OC项目中使用Swift</h3><p>首先，在工程的 <code>Build Settings</code> 中把<code>defines module</code> 设为 <code>YES</code>.</p>
<p><img src="https://lh3.googleusercontent.com/CoJJzYbtcHkNMzk-6fHmGCxVFmvZE2a0l31IW1Fvyz1xiu8IMwcIx-FgjNW39WNwDpEiVZP01zJ4aWdNyfzLAzS8woL6nzMACsQN4vyGSHrKlhovC6hpYY5s9DXrX1XS1a-__mF79TmddooeryqrKzIgs3NSwvExCHFsPWAnMEinx180PB_8p7Y2humw_ErwT0xaYZiELJrXvclG5hLpZCo0uq7OFwt9wkBz4eXrcDA6HhCiEgvUMq81qyLvlqSAmMC7w5X8tWrnnkrFP4Fgdxn728KPp-mi-AplgNOXn1zgXWzFZKwReMwLSrykvJ3Idl1FB9-LPVXO6fpseRk_Xfdzd40PcaB7q4q8RuDTAJiBbcpbBPBy1Uj2A1MFdwA714fchTZYBRw3Ke2T2v7E2RnVWV_ud2NEsdRP-LyTcrHeq12hn41Hn_oIx8IFPDT2Np2EZq7AIhZYR5ejjxZeHJDyq_KRC76zMXH8vsizxM1WXqHMKATkvWeEb2Erb92JvR49aZlo3Ngh_YQEoVY6SLFT94frzIr3RPXEfALU-GgMxrcfHvUp404P9zmpKMLd8HxkxV5cSHuXSqPLOHZEQb6xQ476shYBsBh8_YlmRp_qOJE=w958-h242-no" alt=""></p>
<p>然后，把<code>product module name</code>设置为项目工程的名字。</p>
<p><img src="https://lh3.googleusercontent.com/pgXi29HgcxWPqhFWDszf1Z5lPqKM6G0bA9HcnqJSersttVZMlqeGLZS0NjL5ypTcMyD5A_GbeGDtqCHYTyrvdBkyfBirsR2ZRovZh4796zdsCb8CV2jqrW5dU5947I5Zx7bJCNwEeK5leE89xj3VLbgMYcUo0gSe-Er6hvxQZky0cTR7spg_GFA2_6N1H9raDHxiaTFZVXasGKEXVtAMHh0h5dx0rdBw2zw1p-ZIRV-HLRRYhuLS43t2EQVoiCyEc0Srbt_h1zkWAfPCIWHPgjVre2cpYpwmdDwxNr7tUmjjXOeaJXYVq9snLshfY3ca2gFTXm7QizBmHxwzvH4fjVSaG94nlWzTHFl7NkGfnbHSE_6wnPhIjYZbtbrDOZvDBQVNxUzweaG4HK3ZjkTHe8JPoOnu9bEkBrZq3I05MDa-7sP1eLM-AWp0w2WhwFVD6UM7ELWw1WKPe57mEKQxKYLlnk_J_xvvOGVjojUikyyJQioHhoeTQqskpOhpDZa6Y2oLHS-jZFGKrdgp_wVtAy2pKFZoYxpktwQ7wLJZHFpVaGcXrhTZNaZzVJXUO3wlWhcHX3gITDyAOdWmh7mghKGS2kyYbPs14c2yCvVreK3lWWc=w961-h330-no" alt=""></p>
<p>后续实践更新中…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在Swift项目中使用OC，在OC项目中使用Swift&quot;&gt;&lt;a href=&quot;#在Swift项目中使用OC，在OC项目中使用Swift&quot; class=&quot;headerlink&quot; title=&quot;在Swift项目中使用OC，在OC项目中使用Swift&quot;&gt;&lt;/a&gt;在Swif
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://www.devheminghui.cn/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>兼容iOS 10</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-19/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-19/</id>
    <published>2017-01-08T15:12:17.000Z</published>
    <updated>2017-01-08T15:12:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://im5.tongbu.com/ArticleImage/bd76d138-f.jpg?w=480,343" alt=""></p>
<h3 id="配置获取隐私数据权限声明"><a href="#配置获取隐私数据权限声明" class="headerlink" title="配置获取隐私数据权限声明"></a>配置获取隐私数据权限声明</h3><p>iOS 10的一大变化是更强的隐私数据保护,需要配置获取隐私数据权限声明,简单的说访问用户数据都需要现在Info.plist中声明，否则会crash。</p>
<p>需要声明的用户数据如下：</p>
<blockquote>
<p>Contacts, Calendar, Reminders, Photos, Bluetooth Sharing, Microphone, Camera, Location, Health, HomeKit, Media Library, Motion, CallKit, Speech Recognition, SiriKit, TV Provider.</p>
</blockquote>
<p>info.plist文件中配置方式如下：</p>
<p><img src="https://lh3.googleusercontent.com/5Wbr58_bsdRRaRhGf9ElM24zohExOndGDJ2gN6-Nf7GRVQddAI_Lg0QGkCrHFza--Tx0ImT4E8qm_dQ0CD_jSA6tr7vj9g60nsXRLyO8nd5Ya3yZRpwbEx542x8q9WUkXgoycG9AW_1A2cBxH1D5DG2OOXHZBmASOSq09Em6yRYEbtjeRSPw1c3ZE1zJ1BUWPSHIIwHknFZwbmNXhAPgYSyNDfE-3x383o6V4nHd7Q-mUyUsl-wjegnumcMKprZ53HgsAWHNMAzvboEK4tBIsp-oNWAbOHTyg2NUHGE4BWzqCseiT7gNtYKkxyPwVcXTkTayWX3tV7THFTGOiWMzqw6SeExeLH-CkMo2sCm8l2qX-Kg24gmpBlNRLabRxuojBxNfNG5Pbw3Q3wzyWNPpBfJ2GM0nRWGIZv5LovYnL_cag6OI-t5nkBgSBF6RhqrM-Gs7BRcype0cMAJyjhfiM7j1k8X1fZKgPQSrp4DbiEMvuqRsZJ0fdzJVRNPVBBEfUnreroUDfCWfsHneyV0RMDFrp7lkj1E-CcuZ6i-6FrAL42aDfKHyYv5MRqBWlJNhIkzSBCBAVZ1sK9RmGZV40Dpfih8Xg2NJat9sE_chiD79IP0=w560-h260-no" alt=""></p>
<p>添加一个属性，输入Privacy后就会出现自动提示，xcode 8 已经有了相关的自动补全功能。<br><em>注意：描述内容为空时，不能通过苹果审核</em>。</p>
<h2 id="ATS的问题"><a href="#ATS的问题" class="headerlink" title="ATS的问题"></a>ATS的问题</h2><p>iOS 9中默认非HTTPS的网络请求时被禁止的，当然可以通过把NSAllowArbitraryLoads设为YES来禁用ATS，但是从2017年1月1日起苹果不允许通过这个方式绕过ATS，要求强制使用HTTPS，否则提交审核会被拒绝，但是作为过渡，可以使用NSExceptionDomains添加特定域名开放HTTP，这样比较容易通过审核，但是需要在提交时做说明。</p>
<p>参考文章：<a href="https://onevcat.com/2016/06/ios-10-ats/" target="_blank" rel="external">关于iOS 10中ATS的问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://im5.tongbu.com/ArticleImage/bd76d138-f.jpg?w=480,343&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置获取隐私数据权限声明&quot;&gt;&lt;a href=&quot;#配置获取隐私数据权限声明&quot; class=&quot;h
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="iOS 10" scheme="http://www.devheminghui.cn/tags/iOS-10/"/>
    
  </entry>
  
  <entry>
    <title>升级xcode时更换appid账户</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-18-1/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-18-1/</id>
    <published>2017-01-08T15:11:40.000Z</published>
    <updated>2017-01-08T15:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://blog.csdn.net/zhuzhihai1988/article/details/39803743" target="_blank" rel="external">http://blog.csdn.net/zhuzhihai1988/article/details/39803743</a></p>
<blockquote>
<p>安装时使用了别人提供的Xcode.dmg安装或者别人之前已经下载的，而非使用自己账号在AppStore下载的。<br>这样的安装模式会出现一个问题，更新Xcode时AppStroe会提示让你输入下载该Xcode的账号及密码，该账号不能直接修改。下面的方法可以删除原有账号信息，而后可以使用新的账号信息更新。</p>
</blockquote>
<p>  按照如下步骤解决:</p>
<pre><code>1.打开引用程序目录

2.找到Xcode，右键“显示包内容”

3.找到_MASReceipt文件夹

4.删除它，然后退出重启AppStroe，更新Xcode即可。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://blog.csdn.net/zhuzhihai1988/article/details/39803743&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zhuzhihai198
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Xcode" scheme="http://www.devheminghui.cn/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>渠道方的支付限额是多少？</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-18/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-18/</id>
    <published>2017-01-08T14:56:17.000Z</published>
    <updated>2017-01-08T14:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>各渠道支付限额标准</p>
<ul>
<li>微信：微信支付限额取决于商品类别和发卡银行，虚拟类单笔限额在 1,000-3,000 元之间，实物类在 10,000-50,000 元，具体由发卡行决定，用户可以在绑定银行卡后，查看该行的具体限额。</li>
<li>支付宝移动快捷限额取决于付款方式，参见链接：<a href="https://cshall.alipay.com/lab/help_detail.htm?help_id=387096" target="_blank" rel="external">信用卡的支付限额</a>，<a href="https://cshall.alipay.com/lab/help_detail.htm?help_id=419480" target="_blank" rel="external">储蓄卡的支付限额</a>，<a href="https://cshall.alipay.com/lab/cateQuestion.htm?cateId=237772&amp;pcateId=237760" target="_blank" rel="external">余额宝的支付限额</a>。</li>
<li>银联的支付限额取决于你的商户类型，从 500-10,000 元不等。</li>
<li>招行一网通单笔限额 50,000 元左右</li>
<li>百度钱包、京东支付和易宝具体限额请查看相关合作协议。</li>
<li>应用内快捷支付（银联卡、境外卡）：详情请见快捷支付合作协议。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各渠道支付限额标准&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信：微信支付限额取决于商品类别和发卡银行，虚拟类单笔限额在 1,000-3,000 元之间，实物类在 10,000-50,000 元，具体由发卡行决定，用户可以在绑定银行卡后，查看该行的具体限额。&lt;/li&gt;
&lt;li&gt;支付宝移动
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="支付" scheme="http://www.devheminghui.cn/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>浅谈IBInspectable &amp; IBDesignable</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2017-01-03/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2017-01-03/</id>
    <published>2017-01-08T13:45:35.000Z</published>
    <updated>2017-01-08T15:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>IBInspectable 和 IBDesignable 出现之前，实现圆角这样的效果，可以通过硬编码或者xib／storyBord实例中设置键值编码属性来实现；这两种方式除了需要实时运行程序来查看效果外，通过xib或者storybord来设置键值编码，虽然功能强大，但是一个属性的关键字路径，类型和属性值需要在每个实例中设置，且没有任何自动完成或输入提示，很多时候不得不查看文档或者源代码。用 IBInspectable 和 IBDesignable 可以将自定义属性或者页面暴露在属性检查器面板上，手动设置，方便直观。</p>
<h3 id="IBInspectable"><a href="#IBInspectable" class="headerlink" title="IBInspectable"></a>IBInspectable</h3><p>一，对于Cocoa 内置类型，可以通过扩展将属性暴露在 Interface Builder 属性检查器中，使属性可视。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> customBackColor : <span class="type">UIColor</span>&#123;</div><div class="line"><span class="keyword">get</span>&#123;</div><div class="line"><span class="keyword">return</span> backgroundColor!;</div><div class="line">&#125;</div><div class="line"><span class="keyword">set</span>&#123;</div><div class="line">backgroundColor = newValue;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@IBInspectable 关键字告诉编译器，后面的属性需要在属性检查器中显示，效果如图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-7935ca5ef7279bb3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>同时，在运行时属性栏会自动填充相应的键值属性</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-9292e9adca69e712.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>二，对于自定义View，除了用上述方式之外，更多的直接使用@IBInspectable使自身属性可视化。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> myCornerRadius: <span class="type">CGFloat</span> = <span class="number">0.0</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">layer.cornerRadius = myCornerRadius <span class="comment">//圆角</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> masks : <span class="type">Bool</span> = <span class="literal">true</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">layer.masksToBounds = masks <span class="comment">//mask裁剪</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> myColor : <span class="type">UIColor</span> = <span class="type">UIColor</span>.red&#123;</div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">backgroundColor = myColor <span class="comment">//背景色</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码在 Interface Builder 属性检查器中的效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-709d776295c0f0e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这样通过IBInspectable就可以很方便的在属性检查器中手动设置参数值了。</p>
<h3 id="IBDesignable"><a href="#IBDesignable" class="headerlink" title="IBDesignable"></a>IBDesignable</h3><p>接着说自定义的View，虽然通过@IBInspectable将参数可视化在Interface Builder 属性检查器中；但是设置属性值之后，想要查看效果的话，还是需要每次都运行程序调试。使用IBDesignable却能在xib或storyBord中实时渲染出设置属性的效果。</p>
<p>只需要在上述代码中添加@IBDesignable标签即可</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@<span class="type">IBDesignabl</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> myCornerRadius: <span class="type">CGFloat</span> = <span class="number">0.0</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">layer.cornerRadius = myCornerRadius</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> masks : <span class="type">Bool</span> = <span class="literal">true</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">layer.masksToBounds = masks</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> myColor : <span class="type">UIColor</span> = <span class="type">UIColor</span>.red&#123;</div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">backgroundColor = myColor</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样每次通过属性检查器设置属性之后，可以立即查看到自定义View的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-7542a1fd1650c7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>now，你可以以一种新的方式在组织你的代码了。</p>
<p>不足之处，欢迎指正！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IBInspectable 和 IBDesignable 出现之前，实现圆角这样的效果，可以通过硬编码或者xib／storyBord实例中设置键值编码属性来实现；这两种方式除了需要实时运行程序来查看效果外，通过xib或者storybord来设置键值编码，虽然功能强大，但是一
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Carthage最佳实践</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-12-26/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-12-26/</id>
    <published>2017-01-08T13:39:31.000Z</published>
    <updated>2017-01-08T15:41:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Carthage是去中心化的第三方包管理工具，和cocoapods有明显区别，两者各有优缺点，须视情况使用。Carthage将第三方包及其依赖下载并编译成动态库的形式，仅此而已，有着灵活，低耦合的特点。cocoapods则在使用上简单，但因为中心化的操作方式，需要依靠服务器，服务器出现问题之后没法继续使用更新。</p>
<h4 id="1-安装Homebrew"><a href="#1-安装Homebrew" class="headerlink" title="1.安装Homebrew"></a>1.安装Homebrew</h4><p>Macos系统普遍使用Homebrew安装Carthage。Homebrew时Macos的软件包管理工具（当然还有其他的，例如皮皮虾），类似于linux系统上的yum，apt-get等，mac上默认不安装Homebrew，需要先自己手动安装。</p>
<p>Homebrew安装很简单，终端输入如下命令就行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<p>注：以上命令如果出错，可能需要梯子</p>
<h4 id="2-安装Carthag-打开终端，输入如下指令"><a href="#2-安装Carthag-打开终端，输入如下指令" class="headerlink" title="2.安装Carthag(打开终端，输入如下指令)"></a>2.安装Carthag(打开终端，输入如下指令)</h4><p>1）终端方式：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>update</div><div class="line"></div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>carthage</div></pre></td></tr></table></figure>
<p>2）pkg方式：<br>除了使用终端安装，也可以下载最新版<a href="">Carthage.pkg</a>(<a href="https://github.com/Carthage/Carthage/releases)来安装" target="_blank" rel="external">https://github.com/Carthage/Carthage/releases)来安装</a></p>
<h4 id="3-Carthag使用"><a href="#3-Carthag使用" class="headerlink" title="3.Carthag使用"></a>3.Carthag使用</h4><p>1）通过终端进入项目目录</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`$ cd <span class="regexp">/Users/</span>FYTech<span class="regexp">/Desktop/</span>MyProject</div></pre></td></tr></table></figure>
<p>2)创建一个名为“Cartfile”的文件</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>touch Cartfile</div></pre></td></tr></table></figure>
<p>3）使用vim 或者xcode打开cartfile文件（使用其他文本编辑器也行）</p>
<p>vim打开</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>vim Cartfile</div></pre></td></tr></table></figure>
<p>xcode打开</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">open</span> -<span class="keyword">a</span> Xcode Cartfile</div></pre></td></tr></table></figure>
<p>4）打开后按以下格式添加第三方库</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">github <span class="string">"Alamofire/Alamofire"</span> &gt; <span class="number">3.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注：<br>3.0 表示使用版本3.0以上但是低于4.0的最新版本，如3.5, 3.9</p>
<p>== 3.0 表示使用3.0版本</p>
<p>= 3.0表示使用3.0或更高的版本</p>
<p>没有指明版本号，会自动使用最新的版本</p>
</blockquote>
<p>5）保存之后，输入以下命令，开始开始下载并编译第三方库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ carthage <span class="keyword">update</span> <span class="comment">--platform iOS</span></div></pre></td></tr></table></figure>
<p>执行完成之后命令之后，项目目录会出现一个“Carthage”文件夹，文件夹下有如下两个子文件夹，“Build”文件夹下包含第三方库对应的.framwork,Checkouts则包含下载的第三方库源文件（如图）<br><img src="http://upload-images.jianshu.io/upload_images/852222-c7c78ba77b31d931.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>使用上述命令时，如果不加<code>--platform iOS</code>，默认会同时编译四种平台的.framwork（效果如图）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-68c8c44026f62edd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>6）在项目中引入需要的第三方库对应的framework文件(需要做一些配置)<br>引入方式和引入一般的framework方式差不多，将Build文件夹下对应的frameworkwork拖到对应区域即可，如图：<br><img src="http://upload-images.jianshu.io/upload_images/852222-f5936e20995c2e30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>此时编译项目，会出现错误提示，还需做做一些配置；</p>
<p>1.点击上图“+”号，选择<code>New Run Script Phase</code>，效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/852222-0986daf8a79d1a28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>2.新版本之后，上图“1”对应的区域已经不需要再进行配置了，只需要对“2”进行编辑就行。完成之后，编译项目，如果出错，可以按照上图添加“1”试试。</p>
<p>至此，使用Carthage的方法已经介绍完成。</p>
<p>总结：使用Carthage管理第三方库，因为直接引用的是.framework文件，项目中需求变化需要修改第三方库时，可以通过以下两种方式：1）添加对应库的Extention  2)项目中直接使用对应库的源码。</p>
<p>参考链接：<br>1.<a href="http://www.cnblogs.com/lzrabbit/p/4032515.html" target="_blank" rel="external">http://www.cnblogs.com/lzrabbit/p/4032515.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Carthage是去中心化的第三方包管理工具，和cocoapods有明显区别，两者各有优缺点，须视情况使用。Carthage将第三方包及其依赖下载并编译成动态库的形式，仅此而已，有着灵活，低耦合的特点。cocoapods则在使用上简单，但因为中心化的操作方式，需要依靠服务器
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
  </entry>
  
</feed>
