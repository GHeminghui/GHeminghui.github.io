<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michaela</title>
  <subtitle>米粒儿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.devheminghui.cn/"/>
  <updated>2017-04-05T09:55:27.000Z</updated>
  <id>http://www.devheminghui.cn/</id>
  
  <author>
    <name>heminghui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>构造器一两点总结</title>
    <link href="http://www.devheminghui.cn/2017/04/05/%E6%9E%84%E9%80%A0%E5%99%A8%E4%B8%80%E4%B8%A4%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://www.devheminghui.cn/2017/04/05/构造器一两点总结/</id>
    <published>2017-04-05T08:27:24.000Z</published>
    <updated>2017-04-05T09:55:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，swift类型中结构体，枚举，类初始化生成实例过程中都需要调用构造器；不同的是类支持继承，因此除了初始化自身属性，还需要初始化父类继承来的属性。为了简化代码复杂度，有时会直接使用父类继承来的构造器，但是默认情况下，父类构造器是不会自动继承的。这里总结下构造器自动继承的几个条件。</p>
<p>按照官方文档，子类为所有新属性都设置默认值的前提下，构造器自动继承需要满足下列两个条件之一：</p>
<ol>
<li><p>如果子类没有定义任何指定构造器，它将自动继承所有父类的指定构造器</p>
</li>
<li><p>如果子类提供了所有父类指定构造器的实现——无论是通过规则 1 继承过来的，还是提供了自定义实现——它将自动继承所有父类的便利构造器。</p>
</li>
</ol>
<p>对于第二点，子类可以重写父类指定构造器为便利构造器，这样依然满足条件2</p>
<p>下面，我们在代码中体会上述两点：</p>
<h4 id="条件1"><a href="#条件1" class="headerlink" title="条件1"></a>条件1</h4><p>定义一个父类Vehical</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehical</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> currentSpeed:<span class="type">Double</span>?</div><div class="line">    <span class="keyword">var</span> desciption: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"The speed is <span class="subst">\(currentSpeed)</span>"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> speed : <span class="type">Double</span>, <span class="number">_</span> des : <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.currentSpeed = speed</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="number">_</span> speed : <span class="type">Double</span>)&#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(speed,<span class="string">""</span>)</div><div class="line">        <span class="keyword">self</span>.currentSpeed = speed</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Vehical 有两个属性，存储属性currentSpeed，可选类型；只读计算属性desciption</p>
<p>此外有一个自定义指定构造器，一个自定义便利构造器</p>
<p>现在定义一个子类Bicycle，继承Vehical</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span>: <span class="type">Vehical&#123;</span></span></div><div class="line">    <span class="keyword">var</span> hasBasket = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> gear : <span class="built_in">Int</span> = <span class="number">0</span> &#123;</div><div class="line">        willSet&#123;</div><div class="line">          <span class="comment">//  </span></div><div class="line">        &#125;</div><div class="line">        didSet&#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>子类Bicycle定义了两个有默认值的存储属性，满足了上述条件的前提；现在我们没有为子类实现任何自定义指定构造器，按照条件一，子类会继承父类的指定构造器，我们来尝试调用父类构造器生成子类对象，结果如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> bicycle = Bicycle.init(<span class="number">20</span>,<span class="string">""</span>)<span class="comment">//继承父类指定构造器</span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(bicycle.desciption)</span></span> <span class="comment">//结果： "The speed is Optional(20.0)\n"</span></div></pre></td></tr></table></figure>
<p>结果和预想的一致，父类指定构造器被继承；反过来，我们在子类实现一个如下指定构造器试试，上述代码会立即报错，说明实现了自定义了子类构造器后，父类指定构造器不会继承</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">init</span><span class="params">(basket hasBasket : Bool)</span></span> &#123;</div><div class="line">    self<span class="selector-class">.hasBasket</span> = hasBasket</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="条件二"><a href="#条件二" class="headerlink" title="条件二"></a>条件二</h4><p>继续上述讨论，维持子类实现不变，我们尝试更改子类对象初始化方式，看看能不能成功</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> bicycle = Bicycle.init(<span class="number">20</span>)<span class="comment">//继承父类便利构造器</span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(bicycle.desciption)</span></span><span class="comment">//结果： "The speed is Optional(20.0)\n"</span></div></pre></td></tr></table></figure>
<p>结果和预想的一致，没有任何错误；说明父类的便利构造器也被子类继承了</p>
<p>此外，如果子类如下实现（重写父类指定构造器），上述验证也是通过的</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span>: <span class="title">Vehical</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> hasBasket = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> gear : <span class="type">Int</span> = <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">willSet</span>&#123;</div><div class="line">            <span class="comment">//</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">            <span class="comment">//</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  <span class="keyword">override</span> <span class="keyword">init</span>(<span class="number">_</span> speed : <span class="type">Double</span>, <span class="number">_</span> des : <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(speed,des)</div><div class="line">        <span class="keyword">self</span>.hasBasket = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单总结，欢迎指正～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，swift类型中结构体，枚举，类初始化生成实例过程中都需要调用构造器；不同的是类支持继承，因此除了初始化自身属性，还需要初始化父类继承来的属性。为了简化代码复杂度，有时会直接使用父类继承来的构造器，但是默认情况下，父类构造器是不会自动继承的。这里总结下构造器自动继
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Git使用实录</title>
    <link href="http://www.devheminghui.cn/2017/03/15/Git%E4%BD%BF%E7%94%A8%E5%AE%9E%E5%BD%95/"/>
    <id>http://www.devheminghui.cn/2017/03/15/Git使用实录/</id>
    <published>2017-03-15T05:59:57.000Z</published>
    <updated>2017-03-15T10:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git是一个优秀的分布式版本管理系统，相信大家对Git或多或少有所了解了已经，网上相关的资料也是不少，这里不打算解释相关理论，但最后会推荐几个不错的资料方便需要的人脑补。正如标题所言，这篇文章目的是从实用角度，帮助大家快速上手操作。完全来自项目总结，难免疏漏。</p>
<p>一.添加Git账户</p>
<p>使用git进行版本管理，最终一定会需要提交到公司内部的git仓库的，所以会有一个对应的Git仓库地址，包括用户名，密码。在得到仓库地址，用户名及密码之后，需要在Xcode中添加仓库。</p>
<p>xcode菜单栏开始 选择Xcode-&gt;preference，结果如图：</p>
<p><img src="http://7xs3rb.com1.z0.glb.clouddn.com/xcode-git.jpg" alt=""></p>
<p>点击“+”，选择“Add Respository”,即可添加仓库，相关页面如下：</p>
<p><img src="http://7xs3rb.com1.z0.glb.clouddn.com/xcode-git-2.jpg" alt=""></p>
<p><img src="http://7xs3rb.com1.z0.glb.clouddn.com/xcode-git-3.jpg" alt=""></p>
<p>将前面说的仓库地址，用户名及密码填写完，点击Add即可。</p>
<p><strong>备注：</strong><br>1）如果使用的是SVN，<code>Type</code>选择<code>Subversion</code></p>
<p>2）<code>Authentication</code>(认证方式)，可以视情况选择<code>SSH Keys</code>,这时只需要密码就行。另外如果电脑还没将<code>public keys</code>添加到服务器，可以先参考github的配置方式，这里给出一篇博客<a href="http://blog.csdn.net/qq_34101611/article/details/52057666" target="_blank" rel="external">博客</a>供参考。</p>
<p>二.Xcode版本管理工具实战参考</p>
<p>Xcode版本管理菜单有点简陋，但是基本能满足日常开发需要了；如果再搭配终端命令来辅助的话（最后一部分会详细介绍），基本就没什么可担心的了。</p>
<p>xcode版本控制菜单如下：<br><img src="http://7xs3rb.com1.z0.glb.clouddn.com/xcode-git-5.jpg" alt="xcode版本控制菜单"></p>
<p>从上至下有六部分（以横线区分），现在一一描述：</p>
<p>2.1 working copies</p>
<p>这部分主要进行分支操作（创建分支，切换分支及合并分支），在这里也有对仓库进行配置的入口，如图：<br><img src="http://7xs3rb.com1.z0.glb.clouddn.com/xcode-git-6.jpg" alt=""></p>
<p>2.2 Check Out</p>
<p>从远程仓库拉取一份新的代码，注意拉下来的代码在提交前需要先做一些配置，否则会提交出错:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user<span class="selector-class">.name</span> <span class="string">"mignhuihe"</span></div><div class="line">$ git config --global user<span class="selector-class">.email</span> minghuihe@example.com</div></pre></td></tr></table></figure>
<p>2.3 Commit</p>
<p>提交代码到本地仓库，特别的是Xcode中的这个菜单是<code>git add</code> 和 <code>git commit</code>的组合，就是直接提交到本地仓库；好处是效率提高了（因为实际操作中大多数<code>git add</code>命令之后，直接是<code>git commit</code>；缺点是少了提交前撤销的途径）</p>
<p>2.4 pull </p>
<p>拉取远程git仓库代码并进行合并操作，当然合并就有可能出现冲突，这时候可以利用第三方工具，如SourceTree，也可以用Xcode自带合并工具（一般pull之后，如果出现冲突，会自动跳到xcode手动合并的页面）</p>
<p>关于利用Xcode解决冲突，推荐一篇不错的博客：<a href="http://fzq2016.github.io/IOS笔记/SVN版本管理/chapter9/index.html" target="_blank" rel="external">http://fzq2016.github.io/IOS笔记/SVN版本管理/chapter9/index.html</a></p>
<p>备注：pull之前，一定要commit</p>
<p>2.5 push</p>
<p>提交代码到本地仓库，并且和远程代码已经合并；这时候就可以把自己的代码push到远程git服务器了(过程没有什么区别，这里不多做介绍了)</p>
<p>2.6 Discard <em>**</em></p>
<p>这个简单的来说就是：放弃修改；如果想放弃这个程序的修改（前提是没有commit），可以用这个命令</p>
<p>2.7 history</p>
<p>查看提交历史，能够详细显示其他人的提交状态（包括提交时间，修改内容）；常用的是Show modified files</p>
<p>备注：唯一需要注意是，这个顺序不是按照时间来排的</p>
<p><img src="http://7xs3rb.com1.z0.glb.clouddn.com/xcode-git-7.jpg" alt=""></p>
<p>三.辅助命令</p>
<p>这里介绍一个使用频率还算比较高的git命令，用来作为图形话工具的辅助。</p>
<p>先了解这样一个场景：你正在做一个新功能，可能需要几天时间，而且你已经做了一部分。这是测试告诉你有一个紧急bug需要修改。这时你会怎么做？</p>
<p>相信大部分人都遇到这个问题，当然有多种解决方案；这里介绍我比较常用的：保存工作现场。这种方式用到<code>git stash</code>命令。</p>
<p>这里推荐几个不错关于这方面的博客：</p>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000</a></p>
<p><a href="http://blog.csdn.net/hudashi/article/details/7664710" target="_blank" rel="external">http://blog.csdn.net/hudashi/article/details/7664710</a></p>
<p>最近一直在忙项目，时间仓促，以上算是一个小总结吧，方便还不了解的人查阅，已经熟悉的也欢迎提出意见建议^_^。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是一个优秀的分布式版本管理系统，相信大家对Git或多或少有所了解了已经，网上相关的资料也是不少，这里不打算解释相关理论，但最后会推荐几个不错的资料方便需要的人脑补。正如标题所言，这篇文章目的是从实用角度，帮助大家快速上手操作。完全来自项目总结，难免疏漏。&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Git" scheme="http://www.devheminghui.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>布局约束优先级-初探</title>
    <link href="http://www.devheminghui.cn/2017/02/22/%E5%B8%83%E5%B1%80%E7%BA%A6%E6%9D%9F%E4%BC%98%E5%85%88%E7%BA%A7-%E5%88%9D%E6%8E%A2/"/>
    <id>http://www.devheminghui.cn/2017/02/22/布局约束优先级-初探/</id>
    <published>2017-02-22T06:22:24.000Z</published>
    <updated>2017-02-22T09:30:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>日常iOS开发过程中，可能不太需要关注“约束优先级”这一概念；大部分页面布局的约束(NSLayoutConstraint)使用Storybaord提供的默认优先级(priority)就能解决。但是某些情况下，了解NSLayoutConstraint的priority属性，却能解决方便解决棘手的问题。</p>
<p>下面引用苹果官方的一段话开始本文的讨论：</p>
<blockquote>
<p>约束不仅限于等量关系，它还可以是(&gt;=)或者(&lt;=)来描述两个属性之间的关系，由 NSLayoutRelation 定义。约束还有 1 ~ 1000的优先级，优先级为1000的约束为必须满足，优先级为 1 ~ 999 的约束为可选约束，数字越大其优先级越高，其满足的可能性越高，自动布局系统在满足了所有优先级为 1000 的约束后，会按照优先级从高到低的顺序满足可选约束。默认情况下，所有约束优先级都是 1000，即必须满足。</p>
</blockquote>
<p><strong>内部内容尺寸（Intrinsic Content Size）</strong></p>
<p>我选了两个典型的优先级类型来配合讲解今天的内容：内容压缩阻力优先级（Content Compression Resistance Priority）和内容吸附性优先级（Content Hugging Priority）；每个视图都有这两个优先级。在理解压缩阻力优先级和内容吸附性优先级之前，还需要理解什么是内部内容尺寸（Intrinsic Content Size）。</p>
<p>也许你没听说过这些概念，但其实它就在Size Inspector最下面的位置，如图，只是平时不需要关注它而已：</p>
<p><img src="http://7xs3rb.com1.z0.glb.clouddn.com/Main_storyboard_%E2%80%94_Edited3.jpg" alt="图一"></p>
<p>要说明内部内容尺寸，还需要引用苹果官方的相关描述翻译内容如下：</p>
<blockquote>
<p>简单来说就是，像按钮、文本标签这类视图控件，在布局的时候，它们自己内部比外部布局代码更清楚自己需要多大的尺寸来显示自己的内容。而这个尺寸就是由内部内容尺寸（intrinsic content size）来传达的。这就相当于，内部内容尺寸告诉布局系统：“这个视图里面包含了一些你不能理解的内容，但是我给你指出了那些内容有多大。”</p>
</blockquote>
<p><strong>Content Compression Resistance 与 Content Hugging</strong></p>
<ul>
<li>内容压缩阻力优先级（Content Compression Resistance）</li>
</ul>
<p>内容压缩阻力优先级, 是指 view 阻止其视图大小被压缩到小于其内部内容尺寸的优先级, 即视图反压缩的优先级，优先级越大，视图就越不容易被压小。当自动布局系统为所有视图布局时，遇到约束要求该 view 的尺寸需要小于其内部内容尺寸会用到。</p>
<p>一句话总结：决定着是否能压缩到小于自身内容尺寸；优先级大时，最小尺寸是内容尺寸</p>
<ul>
<li>内容吸附性优先级（Content Hugging）</li>
</ul>
<p>内容吸附性优先级, 是指 view 阻止其视图大小被拉伸到大于其内部内容尺寸的优先级，即视图反拉伸的优先级，优先级越大，视图就越不容易被拉大。</p>
<p>一句话总结：决定是否能够拉伸到大于自身内容尺寸；优先级比较大时，最大尺寸是内容尺寸</p>
<p><strong>实际应用场景讨论</strong></p>
<p><img src="http://7xs3rb.com1.z0.glb.clouddn.com/Main_storyboard_%E2%80%94_Edited2.jpg" alt="图二"></p>
<p>如图，现有两个Lable：label1和lable2；有这样一个需求：需要lable1内容比较少时，视图尺寸随内容变化，内容比较多时，能够截断一部分显示，多余部分省略号表示；lable2不能截断显示，内容要都显示出来。</p>
<p>按照一般步骤，首先得加五个约束（优先级为默认UILayoutPriorityRequired，必须满足）；此时会发现，storyboard有约束警告，因为自动布局系统在满足了所有约束之后，分不清是该压缩lable1，还是压缩lable2；这时应该想到修改优先级了。</p>
<p>那么该怎么修改呢？</p>
<p>问题中提到，lable1内容比较多时，内容截断，而且lable2不允许截断，所以lable1的内容压缩阻力优先级应该比lable2低；<br>lable1内容比较少时，尺寸随内容变化；说明lable1的抗拉伸优先级比lable2强，可以想到lable1的内容吸附性优先级高。</p>
<p>问题最终解决方案如图：</p>
<p><img src="http://7xs3rb.com1.z0.glb.clouddn.com/Main_storyboard_%E2%80%94_Edited3.jpg" alt="图三-lable1设置"><img src="http://7xs3rb.com1.z0.glb.clouddn.com/Main_storyboard_%E2%80%94_Edited_%E5%92%8C_Storyboard%E8%BF%9B%E9%98%B6%E5%86%85%E5%AE%B94.jpg" alt="图四-lable2设置"></p>
<p>最终效果如下：</p>
<p><img src="http://7xs3rb.com1.z0.glb.clouddn.com/Main_storyboard_%E2%80%94_Edited5.jpg" alt="图五"><img src="http://7xs3rb.com1.z0.glb.clouddn.com/Main_storyboard_%E2%80%94_Edited6.jpg" alt="图六"></p>
<p>总结内容，欢迎留言提出修改意见^_^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常iOS开发过程中，可能不太需要关注“约束优先级”这一概念；大部分页面布局的约束(NSLayoutConstraint)使用Storybaord提供的默认优先级(priority)就能解决。但是某些情况下，了解NSLayoutConstraint的priority属性，却
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="布局约束" scheme="http://www.devheminghui.cn/tags/%E5%B8%83%E5%B1%80%E7%BA%A6%E6%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>JS交互之JavaScriptCore</title>
    <link href="http://www.devheminghui.cn/2017/01/18/JS%E4%BA%A4%E4%BA%92%E4%B9%8BJavaScriptCore/"/>
    <id>http://www.devheminghui.cn/2017/01/18/JS交互之JavaScriptCore/</id>
    <published>2017-01-18T07:20:32.000Z</published>
    <updated>2017-02-16T09:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>截止目前，iOS开发中经常用到的js交互方式大概有三种，分别是JavaScriptCore，拦截协议，以及基于拦截协议的第三方开源项目（例如<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">WebViewJavaScriptBridge</a>）;这篇文章首先介绍比较高效，学习成本相对较低的JavaScriptCore方式。</p>
<ul>
<li>基本概念</li>
</ul>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* JSContext：JSContext是代表<span class="keyword">JS</span>的执行环境，通过-evaluateScript:方法就可以执行一<span class="keyword">JS</span>代码</div><div class="line"></div><div class="line">* JSValue：JSValue封装了<span class="keyword">JS</span>与ObjC中的对应的类型，以及调用<span class="keyword">JS</span>的API等</div><div class="line"></div><div class="line">* JSExport：JSExport是一个协议，遵守此协议，就可以定义我们自己的协议，在协议中声明的API都会在<span class="keyword">JS</span>中暴露出来，才能调用</div></pre></td></tr></table></figure>
<ul>
<li>基本使用讲解</li>
</ul>
<p>我们通过举个栗子🌰，来感受通过JavaScriptCore实现js和oc之间的交互。</p>
<p>首先，我们准备一段html代码，当然要包含相应的js代码（对js不熟悉的也没关系，继续往下看）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">\</span>"<span class="attr">margin-top:</span> <span class="attr">100px</span>\"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test how to use objective-c call js<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--1.进入商品详情按钮--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">\</span>"<span class="attr">button</span>\" <span class="attr">value</span>=<span class="string">\</span>"商品详情\" <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">OCModel.callGoodsDetail</span>(<span class="attr">param1</span>)\"&gt;</span></div><div class="line"><span class="comment">&lt;!--2.加入购物车按钮--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">\</span>"<span class="attr">button</span>\" <span class="attr">value</span>=<span class="string">\</span>"加入购物车\" <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">callAddShoppingCart</span>('<span class="attr">C10640155508000B0601</span>')\"&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--3.进入店铺主页按钮--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">\</span>"<span class="attr">button</span>\" <span class="attr">value</span>=<span class="string">\</span>"进入店铺主页 \" <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">OCModel.callStore</span>('<span class="attr">S16092209</span>')\"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">\</span>"<span class="attr">button</span>\" <span class="attr">value</span>=<span class="string">\</span>"<span class="attr">Call</span> <span class="attr">ObjC</span> <span class="attr">func</span> <span class="attr">with</span> <span class="attr">JSON</span> <span class="attr">and</span> <span class="attr">ObjC</span> <span class="attr">call</span> <span class="attr">js</span> <span class="attr">func</span> <span class="attr">to</span> <span class="attr">pass</span> <span class="attr">args.</span>\" <span class="attr">onclick</span>=<span class="string">\</span>"<span class="attr">OCModel.jsCallObjcAndObjcCallJsWithDict</span>(&#123;'<span class="attr">name</span>'<span class="attr">:</span> '<span class="attr">testname</span>', '<span class="attr">age</span>'<span class="attr">:</span> <span class="attr">10</span>, '<span class="attr">height</span>'<span class="attr">:</span> <span class="attr">170</span>&#125;)\"&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">\</span>"<span class="attr">jsParamFuncSpan</span>\" <span class="attr">style</span>=<span class="string">\</span>"<span class="attr">color:</span> <span class="attr">red</span>; <span class="attr">font-size:</span> <span class="attr">50px</span>;\"&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="keyword">var</span> callAddShoppingCart = <span class="function"><span class="keyword">function</span><span class="params">(goodsId)</span> </span>&#123;</div><div class="line">        OCModel.addShoppingCart(goodsId);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个html页面比较简单，只有几个按钮；</p>
<p>然后就是JSContext中注入模型，前面说过JSContext是js的执行环境，相当于oc和js之间的一个桥梁，可以用对象之间的映射关系来理解注入过程。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView</div><div class="line">&#123;</div><div class="line">    <span class="comment">//1.获取JSContext</span></div><div class="line">    <span class="keyword">self</span>.jsContext = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    <span class="comment">//2.注入名为OCModel的模型，并和自身关联</span></div><div class="line">    <span class="keyword">self</span>.jsContext[<span class="string">@"OCModel"</span>] = <span class="keyword">self</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//3.异常处理，一般加上比较好</span></div><div class="line">    <span class="keyword">self</span>.jsContext.exceptionHandler = ^(JSContext *context, JSValue *exception)&#123;</div><div class="line">        <span class="comment">//异常处理</span></div><div class="line">        context.exception = exception;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,exception);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">//设置标题</span></div><div class="line">    <span class="built_in">NSString</span> *title = [webView stringByEvaluatingJavaScriptFromString:<span class="string">@"document.title"</span>];</div><div class="line">    <span class="keyword">self</span>.title = title == <span class="literal">nil</span> ? <span class="string">@""</span> : title;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再者，要实现真正的交互，到这一步还是不够的，最重要的一点是注入的模型还需要满足相关协议；前面说过，这个协议也同时要遵守JSExport协议（ 只有遵守了JSExport协议，js代码才能通过JSContext调用协议中的函数 ），栗子中协议如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> js和OC交互协议</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">JavaScriptObjectiveCDelegate</span> &lt;<span class="title">JSExport</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//查看商品详情</span></div><div class="line">- (<span class="keyword">void</span>)callGoodsDetail:(<span class="built_in">NSString</span> *)goodsId;</div><div class="line"><span class="comment">//添加购物车</span></div><div class="line">- (<span class="keyword">void</span>)addShoppingCart:(<span class="built_in">NSString</span> *)goodsId;</div><div class="line"><span class="comment">//查看卖家店铺</span></div><div class="line">- (<span class="keyword">void</span>)callStore:(<span class="built_in">NSString</span> *)storeId;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>最后，剩下的就是在注入模型中实现这个协议就行了。</p>
<ul>
<li>进阶用法</li>
</ul>
<p>前面陈述的是，oc通过注入模型，将协议方法暴露给js，js则通过JSContext调用oc方法实现交互；既然JSContext是js和oc交互的桥梁，那也能通过JSContext实现相反的过程（oc调用js）；接着上面的例子，通过回调来体会oc调用js。</p>
<p>1，首先我们得修改一下上面的html代码的javaScript部分：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="keyword">var</span> callAddShoppingCart = <span class="function"><span class="keyword">function</span><span class="params">(goodsId)</span> </span>&#123;</div><div class="line">        OCModel.addShoppingCart(goodsId);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> funcCallback = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        alert(<span class="string">'success'</span>);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">......</div></pre></td></tr></table></figure>
<p>2， 接下来就是用oc通过JSContext调用js，来实现回调了</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - JavaScriptObjectiveCDelegate</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addShoppingCart:(<span class="built_in">NSString</span> *)goodsId</div><div class="line">&#123;</div><div class="line"><span class="comment">//添加完购物车，回调到html页面</span></div><div class="line">    JSValue *shareCallback = <span class="keyword">self</span>.jsContext[<span class="string">@"funcCallback"</span>];</div><div class="line">    [shareCallback callWithArguments:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后，介绍几个oc调用js的其他方式（通常用来执行小段js代码比较有用）:</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UIWebView的方法</span></div><div class="line"><span class="selector-tag">-</span> (nullable NSString *)<span class="selector-tag">stringByEvaluatingJavaScriptFromString</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">script</span>;</div><div class="line"> </div><div class="line"><span class="comment">// JavaScriptCore中JSContext的方法</span></div><div class="line"><span class="selector-tag">-</span> (JSValue *)<span class="selector-tag">evaluateScript</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">script</span>;</div><div class="line"><span class="selector-tag">-</span> (JSValue *)<span class="selector-tag">evaluateScript</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">script</span> <span class="selector-tag">withSourceURL</span><span class="selector-pseudo">:(NSURL</span> *)<span class="selector-tag">sourceURL</span></div></pre></td></tr></table></figure>
<p>以上方式的使用小场景参考：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取当前页面的title</span></div><div class="line">NSString *title = [webview <span class="string">stringByEvaluatingJavaScriptFromString:</span>@<span class="string">"document.title"</span>];</div><div class="line"> </div><div class="line"><span class="comment">// 获取当前页面的url</span></div><div class="line">NSString *url = [webview <span class="string">stringByEvaluatingJavaScriptFromString:</span>@<span class="string">"document.location.href"</span>];</div></pre></td></tr></table></figure>
<p>本文前人的基础上按自己的理解补充总结，不足之处，欢迎留言指正！—</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;截止目前，iOS开发中经常用到的js交互方式大概有三种，分别是JavaScriptCore，拦截协议，以及基于拦截协议的第三方开源项目（例如&lt;a href=&quot;https://github.com/marcuswestin/WebViewJavascriptBridge&quot; t
    
    </summary>
    
    
      <category term="JavaScriptCore" scheme="http://www.devheminghui.cn/tags/JavaScriptCore/"/>
    
  </entry>
  
  <entry>
    <title>年终</title>
    <link href="http://www.devheminghui.cn/2017/01/18/%E5%B9%B4%E5%89%8D%E7%BD%91%E7%AB%99%E6%89%93%E7%90%86/"/>
    <id>http://www.devheminghui.cn/2017/01/18/年前网站打理/</id>
    <published>2017-01-18T07:20:32.000Z</published>
    <updated>2017-04-05T10:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直觉得自己不是一个爱折腾的人，博客刚搭起来的时候，也是着实简陋，当时觉得能有个属于自己的地方，发发博客就行，所以索性连“关于”都懒的写一写，空了很久；直到最近工作相对比较少，才觉得要把博客完善完善了；无奈不太懂web前端的技术，只能照着添加了一些功能，包括多说评论，历史，关于，最新评论等；今天也算事最终完成了一个简单博客该有的功能。</p>
<p>屋子搭建好了，接下来就需要按时写博客，写总结了，以此为来年目标。</p>
<p>最后，附上一段杨绛的《一百岁感言》共勉！</p>
<blockquote>
<p>我们曾如此渴望命运的波澜<br>到最后才发现<br>人生最曼妙的风景<br>竟是内心的淡定与从容<br>我们曾如此期盼外界的认可<br>到最后才知道<br>世界是自己的<br>与他人毫无关系！<br>——杨绛<br>《一百岁感言》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直觉得自己不是一个爱折腾的人，博客刚搭起来的时候，也是着实简陋，当时觉得能有个属于自己的地方，发发博客就行，所以索性连“关于”都懒的写一写，空了很久；直到最近工作相对比较少，才觉得要把博客完善完善了；无奈不太懂web前端的技术，只能照着添加了一些功能，包括多说评论，历史，
    
    </summary>
    
      <category term="随笔" scheme="http://www.devheminghui.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="总结" scheme="http://www.devheminghui.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hexo搭建个人站</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-24/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-24/</id>
    <published>2017-01-08T15:15:08.000Z</published>
    <updated>2017-01-17T04:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo是基于Node.js的静态网页生成工具，对不具有前端技术经验的童鞋来说，也能很好的搭建个人站</p>
<ul>
<li>第一步：准备</li>
</ul>
<ol>
<li>安装<code>hexo</code>之前，需要先安装好<code>Node.js</code>,安装Node只需要去官网下载相应安装文件安装即可，推荐下载最新的版本；</li>
<li>安装<code>Git</code>(Mac自带了已经)</li>
<li>备好<code>github</code>账号，最好配置好<code>SSH Keys</code>（不懂如何配置ssh的童鞋，<a href="http://www.cnblogs.com/ayseeing/p/3572582.html" target="_blank" rel="external">这里看</a>）</li>
</ol>
<ul>
<li>第二步：本地化</li>
</ul>
<ol>
<li><p>安装<code>Hexo</code></p>
 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g hexo</div></pre></td></tr></table></figure>
</li>
<li><p>初始化<code>Hexo</code>，指定一个目录执行命令</p>
 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init</span></div></pre></td></tr></table></figure>
</li>
<li><p>生成静态页面，在初始化的目录执行命令</p>
 <figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo  <span class="keyword">generate</span>  或者 hexo g</div></pre></td></tr></table></figure>
</li>
</ol>
<p>执行生成静态页面命令之前，最好先执行下面命令，清除缓存，,避免不必要的奇怪问题</p>
<pre><code><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo clean</span></div></pre></td></tr></table></figure>
</code></pre><p>生成的静态页面在<code>hexo/public</code> 目录中</p>
<ol>
<li><p>本地启动，启动本地<code>service</code>，进行本地预览和调试</p>
 <figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span>  或者 hexo s</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这步可能会提示各种错误，最常见的错误和解决办法如下</p>
<pre><code><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">错误：ERROR Plugin <span class="keyword">load</span> <span class="keyword">failed</span>: hexo-<span class="keyword">server</span></div><div class="line">解决方法，执行命令: sudo npm <span class="keyword">install</span> hexo-<span class="keyword">server</span></div><div class="line"></div><div class="line">错误： <span class="keyword">Usage</span>: hexo ...</div><div class="line">解决方法，执行命令： npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></div></pre></td></tr></table></figure>
</code></pre><ul>
<li>第三步：发布到远程GitHub</li>
</ul>
<ol>
<li>新建远程仓库，注意仓库名称必须为：<code>your_github_userName.github.io</code> 固定写法    </li>
<li><p>接下来，我们需要修改<code>_config.yml</code>来和远程仓库建立关联，在文件下面修改为</p>
 <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">   <span class="attribute">type</span>: git </div><div class="line">   <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/leopardpan/your_github_userName.github.io.git </span></div><div class="line">   <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：如果你使用了<code>SSH</code>，写法稍有不同，应该写成</p>
<pre><code><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:your_github_userName/your_github_userName.github.io.git</div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>最后执行如下命令，将本地文件发布到远程<code>github</code>仓库</p>
 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo deploy</span></div></pre></td></tr></table></figure>
<p> 浏览器中打开 <code>http://your_github_userName.github.io/</code> ,搭建基本完成</p>
</li>
</ol>
<ul>
<li>第四步：其他配置</li>
</ul>
<ol>
<li>配置主题<br>可以找几个不错的主题来试试，我个人使用的是相对简洁的<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>，相关的hexo主题有很多，这里附上推荐链接：<br><a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">https://www.zhihu.com/question/24422335</a></li>
</ol>
<ol>
<li>域名及域名解析服务：<br>我使用的域名是在万网申请的，域名解析服务是<a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod</a><br>关于域名绑定的问题推荐阅读：<br><a href="http://www.jianshu.com/p/1d427e888dda" target="_blank" rel="external">http://www.jianshu.com/p/1d427e888dda</a></li>
<li><p>评论系统<br>hexo支持多说，大多数个人站用的页比较多,所以直接就用多说了</p>
</li>
<li><p>图床<br>直接在目录中放图片也是可以的，不过考虑到加载速度，还是使用图床效果好点，国内用户推荐使用<a href="http://www.qiniu.com/cdnjiangjia?utm_campaign=cdnjiangjia&amp;utm_source=baidu&amp;utm_medium=advposition&amp;utm_content=png" target="_blank" rel="external">七牛</a>，可翻墙用户使用<code>google photos</code>方便一些。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo是基于Node.js的静态网页生成工具，对不具有前端技术经验的童鞋来说，也能很好的搭建个人站&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步：准备&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;安装&lt;code&gt;hexo&lt;/code&gt;之前，需要先安装好&lt;code&gt;Node.js&lt;/cod
    
    </summary>
    
      <category term="网站" scheme="http://www.devheminghui.cn/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="Hexo" scheme="http://www.devheminghui.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>动画时间</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-23/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-23/</id>
    <published>2017-01-08T15:14:07.000Z</published>
    <updated>2017-01-17T04:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>全局时间和本地时间S</li>
</ul>
<p>CoreAnimation有一个全局时间的概念，也就是所谓的<strong>马赫时间</strong>（“马赫”实际上是iOS和Mac OS系统内核的命名）。马赫时间在设备上所有进程都是全局的–但是在不同设备上并不是全局的–不过这已经足够对动画的参考点提供便利了，你可以使用CACurrentMediaTime函数来访问马赫时间：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CFTimeInterval time</span> = CACurrentMediaTime();</div></pre></td></tr></table></figure>
<p>这个函数返回的值其实无关紧要（它返回了设备自从上次启动后的秒数，并不是你所关心的），它真实的作用在于对动画的时间测量提供了一个相对值。注意当设备休眠的时候马赫时间会暂停，也就是所有的CAAnimations（基于马赫时间）同样也会暂停。</p>
<p>每个CALayer和CAAnimation实例都有自己本地时间的概念，是根据父图层/动画层级关系中的beginTime，timeOffset和speed属性计算。就和转换不同图层之间坐标关系一样，CALayer同样也提供了方法来转换不同图层之间的本地时间。如下：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(CFTimeInterval)</span>convertTime:<span class="params">(CFTimeInterval)</span>t fromLayer:<span class="params">(CALayer *)</span>l; </div><div class="line">- <span class="params">(CFTimeInterval)</span>convertTime:<span class="params">(CFTimeInterval)</span>t toLayer:<span class="params">(CALayer *)</span>l;</div></pre></td></tr></table></figure>
<p>当用来同步不同图层之间有不同的speed，timeOffset和beginTime的动画，这些方法会很有用。</p>
<ul>
<li>暂停，倒回和快进</li>
</ul>
<p>设置动画的speed属性为0可以暂停动画，但在动画被添加到图层之后不太可能再修改它了，所以不能对正在进行的动画使用这个属性。给图层添加一个<code>CAAnimation</code>实际上是给动画对象做了一个不可改变的拷贝，所以对原始动画对象属性的改变对真实的动画并没有作用。相反，直接用<code>-animationForKey:</code>来检索图层正在进行的动画可以返回正确的动画对象，但是修改它的属性将会抛出异常。<br>如果移除图层正在进行的动画，图层将会急速返回动画之前的状态。但如果在动画移除之前拷贝呈现图层到模型图层，动画将会看起来暂停在那里。但是不好的地方在于之后就不能再恢复动画了。<br>一个简单的方法是可以利用<code>CAMediaTiming</code>来暂停图层本身。如果把图层的speed设置成0，它会暂停任何添加到图层上的动画。类似的，设置<code>speed</code>大于1.0将会快进，设置成一个负值将会倒回动画。<br>通过增加主窗口图层的speed，可以暂停整个应用程序的动画。这对UI自动化提供了好处，我们可以加速所有的视图动画来进行自动化测试（注意对于在主窗口之外的视图并不会被影响，比如UIAlertview）。可以在app delegate设置如下进行验证：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.window.layer.speed = <span class="number">100</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>你也可以通过这种方式来减速，但其实也可以在模拟器通过切换慢速动画来实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;全局时间和本地时间S&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CoreAnimation有一个全局时间的概念，也就是所谓的&lt;strong&gt;马赫时间&lt;/strong&gt;（“马赫”实际上是iOS和Mac OS系统内核的命名）。马赫时间在设备上所有进程都是全局的–但是在不同设备上并
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="动画" scheme="http://www.devheminghui.cn/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Carthage包管理体验及常见swift库</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-21/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-21/</id>
    <published>2017-01-08T15:13:52.000Z</published>
    <updated>2017-01-08T15:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>CoaoaPods 是一套整体解决方案，我们在 Podfile 中指定好我们需要的第三方库。然后 CocoaPods 就会进行下载，集成，然后修改或者创建我们项目的 workspace 文件，这一系列整体操作。</p>
<p>相比之下，Carthage 就要轻量很多，它也会一个叫做 Cartfile 描述文件，但 Carthage 不会对我们的项目结构进行任何修改，更不多创建 workspace。它只是根据我们描述文件中配置的第三方库，将他们下载到本地，然后使用 xcodebuild 构建成 framework 文件。然后由我们自己将这些库集成到项目中。Carthage 使用的是一种<strong>非侵入性</strong>的哲学。</p>
<p>具体使用如下：<a href="http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/" target="_blank" rel="external">http://swiftcafe.io/2015/10/25/swift-daily-carthage-package/</a></p>
<h4 id="常见swift第三方库-会不断更新"><a href="#常见swift第三方库-会不断更新" class="headerlink" title="常见swift第三方库(会不断更新)"></a>常见swift第三方库(会不断更新)</h4><p><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a>（swift版的AFN）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CoaoaPods 是一套整体解决方案，我们在 Podfile 中指定好我们需要的第三方库。然后 CocoaPods 就会进行下载，集成，然后修改或者创建我们项目的 workspace 文件，这一系列整体操作。&lt;/p&gt;
&lt;p&gt;相比之下，Carthage 就要轻量很多，它也会
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 8 新特性</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-20/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-20/</id>
    <published>2017-01-08T15:13:39.000Z</published>
    <updated>2017-01-17T04:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>如何消除Xcode 8 自带打印的日志</li>
</ul>
<p>参考文章：<a href="http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs" target="_blank" rel="external">http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;如何消除Xcode 8 自带打印的日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;http://stackoverflow.com/questions/37800790/hide-strange-unwanted-xcode-8-logs&quot; tar
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Xcode 8" scheme="http://www.devheminghui.cn/tags/Xcode-8/"/>
    
  </entry>
  
  <entry>
    <title>Swift/OC混编之道</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-20-1/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-20-1/</id>
    <published>2017-01-08T15:13:10.000Z</published>
    <updated>2017-01-17T04:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>在Swift项目中使用OC，在OC项目中使用Swift</li>
</ul>
<p>首先，在工程的 <code>Build Settings</code> 中把<code>defines module</code> 设为 <code>YES</code>.</p>
<p><img src="https://lh3.googleusercontent.com/CoJJzYbtcHkNMzk-6fHmGCxVFmvZE2a0l31IW1Fvyz1xiu8IMwcIx-FgjNW39WNwDpEiVZP01zJ4aWdNyfzLAzS8woL6nzMACsQN4vyGSHrKlhovC6hpYY5s9DXrX1XS1a-__mF79TmddooeryqrKzIgs3NSwvExCHFsPWAnMEinx180PB_8p7Y2humw_ErwT0xaYZiELJrXvclG5hLpZCo0uq7OFwt9wkBz4eXrcDA6HhCiEgvUMq81qyLvlqSAmMC7w5X8tWrnnkrFP4Fgdxn728KPp-mi-AplgNOXn1zgXWzFZKwReMwLSrykvJ3Idl1FB9-LPVXO6fpseRk_Xfdzd40PcaB7q4q8RuDTAJiBbcpbBPBy1Uj2A1MFdwA714fchTZYBRw3Ke2T2v7E2RnVWV_ud2NEsdRP-LyTcrHeq12hn41Hn_oIx8IFPDT2Np2EZq7AIhZYR5ejjxZeHJDyq_KRC76zMXH8vsizxM1WXqHMKATkvWeEb2Erb92JvR49aZlo3Ngh_YQEoVY6SLFT94frzIr3RPXEfALU-GgMxrcfHvUp404P9zmpKMLd8HxkxV5cSHuXSqPLOHZEQb6xQ476shYBsBh8_YlmRp_qOJE=w958-h242-no" alt=""></p>
<p>然后，把<code>product module name</code>设置为项目工程的名字。</p>
<p><img src="https://lh3.googleusercontent.com/pgXi29HgcxWPqhFWDszf1Z5lPqKM6G0bA9HcnqJSersttVZMlqeGLZS0NjL5ypTcMyD5A_GbeGDtqCHYTyrvdBkyfBirsR2ZRovZh4796zdsCb8CV2jqrW5dU5947I5Zx7bJCNwEeK5leE89xj3VLbgMYcUo0gSe-Er6hvxQZky0cTR7spg_GFA2_6N1H9raDHxiaTFZVXasGKEXVtAMHh0h5dx0rdBw2zw1p-ZIRV-HLRRYhuLS43t2EQVoiCyEc0Srbt_h1zkWAfPCIWHPgjVre2cpYpwmdDwxNr7tUmjjXOeaJXYVq9snLshfY3ca2gFTXm7QizBmHxwzvH4fjVSaG94nlWzTHFl7NkGfnbHSE_6wnPhIjYZbtbrDOZvDBQVNxUzweaG4HK3ZjkTHe8JPoOnu9bEkBrZq3I05MDa-7sP1eLM-AWp0w2WhwFVD6UM7ELWw1WKPe57mEKQxKYLlnk_J_xvvOGVjojUikyyJQioHhoeTQqskpOhpDZa6Y2oLHS-jZFGKrdgp_wVtAy2pKFZoYxpktwQ7wLJZHFpVaGcXrhTZNaZzVJXUO3wlWhcHX3gITDyAOdWmh7mghKGS2kyYbPs14c2yCvVreK3lWWc=w961-h330-no" alt=""></p>
<p>后续实践更新中…</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在Swift项目中使用OC，在OC项目中使用Swift&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先，在工程的 &lt;code&gt;Build Settings&lt;/code&gt; 中把&lt;code&gt;defines module&lt;/code&gt; 设为 &lt;code&gt;YES&lt;/code&gt;.&lt;/p
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://www.devheminghui.cn/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>兼容iOS 10</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-19/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-19/</id>
    <published>2017-01-08T15:12:17.000Z</published>
    <updated>2017-01-17T04:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://im5.tongbu.com/ArticleImage/bd76d138-f.jpg?w=480,343" alt=""></p>
<ul>
<li>配置获取隐私数据权限声明</li>
</ul>
<p>iOS 10的一大变化是更强的隐私数据保护,需要配置获取隐私数据权限声明,简单的说访问用户数据都需要现在Info.plist中声明，否则会crash。</p>
<p>需要声明的用户数据如下：</p>
<blockquote>
<p>Contacts, Calendar, Reminders, Photos, Bluetooth Sharing, Microphone, Camera, Location, Health, HomeKit, Media Library, Motion, CallKit, Speech Recognition, SiriKit, TV Provider.</p>
</blockquote>
<p>info.plist文件中配置方式如下：</p>
<p><img src="https://lh3.googleusercontent.com/5Wbr58_bsdRRaRhGf9ElM24zohExOndGDJ2gN6-Nf7GRVQddAI_Lg0QGkCrHFza--Tx0ImT4E8qm_dQ0CD_jSA6tr7vj9g60nsXRLyO8nd5Ya3yZRpwbEx542x8q9WUkXgoycG9AW_1A2cBxH1D5DG2OOXHZBmASOSq09Em6yRYEbtjeRSPw1c3ZE1zJ1BUWPSHIIwHknFZwbmNXhAPgYSyNDfE-3x383o6V4nHd7Q-mUyUsl-wjegnumcMKprZ53HgsAWHNMAzvboEK4tBIsp-oNWAbOHTyg2NUHGE4BWzqCseiT7gNtYKkxyPwVcXTkTayWX3tV7THFTGOiWMzqw6SeExeLH-CkMo2sCm8l2qX-Kg24gmpBlNRLabRxuojBxNfNG5Pbw3Q3wzyWNPpBfJ2GM0nRWGIZv5LovYnL_cag6OI-t5nkBgSBF6RhqrM-Gs7BRcype0cMAJyjhfiM7j1k8X1fZKgPQSrp4DbiEMvuqRsZJ0fdzJVRNPVBBEfUnreroUDfCWfsHneyV0RMDFrp7lkj1E-CcuZ6i-6FrAL42aDfKHyYv5MRqBWlJNhIkzSBCBAVZ1sK9RmGZV40Dpfih8Xg2NJat9sE_chiD79IP0=w560-h260-no" alt=""></p>
<p>添加一个属性，输入Privacy后就会出现自动提示，xcode 8 已经有了相关的自动补全功能。<br><em>注意：描述内容为空时，不能通过苹果审核</em>。</p>
<ul>
<li>ATS的问题</li>
</ul>
<p>iOS 9中默认非HTTPS的网络请求时被禁止的，当然可以通过把NSAllowArbitraryLoads设为YES来禁用ATS，但是从2017年1月1日起苹果不允许通过这个方式绕过ATS，要求强制使用HTTPS，否则提交审核会被拒绝，但是作为过渡，可以使用NSExceptionDomains添加特定域名开放HTTP，这样比较容易通过审核，但是需要在提交时做说明。</p>
<p>参考文章：<a href="https://onevcat.com/2016/06/ios-10-ats/" target="_blank" rel="external">关于iOS 10中ATS的问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://im5.tongbu.com/ArticleImage/bd76d138-f.jpg?w=480,343&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置获取隐私数据权限声明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOS 10的一大变化是更强的隐私数
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="iOS 10" scheme="http://www.devheminghui.cn/tags/iOS-10/"/>
    
  </entry>
  
  <entry>
    <title>升级xcode时更换appid账户</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-18-1/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-18-1/</id>
    <published>2017-01-08T15:11:40.000Z</published>
    <updated>2017-01-17T04:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装时使用了别人提供的Xcode.dmg安装或者别人之前已经下载的，而非使用自己账号在AppStore下载的。这样的安装模式会出现一个问题，更新Xcode时AppStroe会提示让你输入下载该Xcode的账号及密码，该账号不能直接修改。下面的方法可以删除原有账号信息，而后可以使用新的账号信息更新。</p>
<p>  按照如下步骤解决:</p>
<pre><code>1.打开引用程序目录

2.找到Xcode，右键“显示包内容”

3.找到_MASReceipt文件夹

4.删除它，然后退出重启AppStroe，更新Xcode即可。
</code></pre><p>参考：<a href="http://blog.csdn.net/zhuzhihai1988/article/details/39803743" target="_blank" rel="external">http://blog.csdn.net/zhuzhihai1988/article/details/39803743</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装时使用了别人提供的Xcode.dmg安装或者别人之前已经下载的，而非使用自己账号在AppStore下载的。这样的安装模式会出现一个问题，更新Xcode时AppStroe会提示让你输入下载该Xcode的账号及密码，该账号不能直接修改。下面的方法可以删除原有账号信息，而后
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Xcode" scheme="http://www.devheminghui.cn/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>渠道方的支付限额是多少？</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-09-18/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-09-18/</id>
    <published>2017-01-08T14:56:17.000Z</published>
    <updated>2017-01-08T14:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>各渠道支付限额标准</p>
<ul>
<li>微信：微信支付限额取决于商品类别和发卡银行，虚拟类单笔限额在 1,000-3,000 元之间，实物类在 10,000-50,000 元，具体由发卡行决定，用户可以在绑定银行卡后，查看该行的具体限额。</li>
<li>支付宝移动快捷限额取决于付款方式，参见链接：<a href="https://cshall.alipay.com/lab/help_detail.htm?help_id=387096" target="_blank" rel="external">信用卡的支付限额</a>，<a href="https://cshall.alipay.com/lab/help_detail.htm?help_id=419480" target="_blank" rel="external">储蓄卡的支付限额</a>，<a href="https://cshall.alipay.com/lab/cateQuestion.htm?cateId=237772&amp;pcateId=237760" target="_blank" rel="external">余额宝的支付限额</a>。</li>
<li>银联的支付限额取决于你的商户类型，从 500-10,000 元不等。</li>
<li>招行一网通单笔限额 50,000 元左右</li>
<li>百度钱包、京东支付和易宝具体限额请查看相关合作协议。</li>
<li>应用内快捷支付（银联卡、境外卡）：详情请见快捷支付合作协议。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各渠道支付限额标准&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信：微信支付限额取决于商品类别和发卡银行，虚拟类单笔限额在 1,000-3,000 元之间，实物类在 10,000-50,000 元，具体由发卡行决定，用户可以在绑定银行卡后，查看该行的具体限额。&lt;/li&gt;
&lt;li&gt;支付宝移动
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="支付" scheme="http://www.devheminghui.cn/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>浅谈IBInspectable &amp; IBDesignable</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2017-01-03/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2017-01-03/</id>
    <published>2017-01-08T13:45:35.000Z</published>
    <updated>2017-01-08T15:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>IBInspectable 和 IBDesignable 出现之前，实现圆角这样的效果，可以通过硬编码或者xib／storyBord实例中设置键值编码属性来实现；这两种方式除了需要实时运行程序来查看效果外，通过xib或者storybord来设置键值编码，虽然功能强大，但是一个属性的关键字路径，类型和属性值需要在每个实例中设置，且没有任何自动完成或输入提示，很多时候不得不查看文档或者源代码。用 IBInspectable 和 IBDesignable 可以将自定义属性或者页面暴露在属性检查器面板上，手动设置，方便直观。</p>
<h3 id="IBInspectable"><a href="#IBInspectable" class="headerlink" title="IBInspectable"></a>IBInspectable</h3><p>一，对于Cocoa 内置类型，可以通过扩展将属性暴露在 Interface Builder 属性检查器中，使属性可视。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> customBackColor : <span class="type">UIColor</span>&#123;</div><div class="line"><span class="keyword">get</span>&#123;</div><div class="line"><span class="keyword">return</span> backgroundColor!;</div><div class="line">&#125;</div><div class="line"><span class="keyword">set</span>&#123;</div><div class="line">backgroundColor = newValue;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@IBInspectable 关键字告诉编译器，后面的属性需要在属性检查器中显示，效果如图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-7935ca5ef7279bb3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>同时，在运行时属性栏会自动填充相应的键值属性</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-9292e9adca69e712.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>二，对于自定义View，除了用上述方式之外，更多的直接使用@IBInspectable使自身属性可视化。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> myCornerRadius: <span class="type">CGFloat</span> = <span class="number">0.0</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">layer.cornerRadius = myCornerRadius <span class="comment">//圆角</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> masks : <span class="type">Bool</span> = <span class="literal">true</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">layer.masksToBounds = masks <span class="comment">//mask裁剪</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> myColor : <span class="type">UIColor</span> = <span class="type">UIColor</span>.red&#123;</div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">backgroundColor = myColor <span class="comment">//背景色</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码在 Interface Builder 属性检查器中的效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-709d776295c0f0e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这样通过IBInspectable就可以很方便的在属性检查器中手动设置参数值了。</p>
<h3 id="IBDesignable"><a href="#IBDesignable" class="headerlink" title="IBDesignable"></a>IBDesignable</h3><p>接着说自定义的View，虽然通过@IBInspectable将参数可视化在Interface Builder 属性检查器中；但是设置属性值之后，想要查看效果的话，还是需要每次都运行程序调试。使用IBDesignable却能在xib或storyBord中实时渲染出设置属性的效果。</p>
<p>只需要在上述代码中添加@IBDesignable标签即可</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@<span class="type">IBDesignabl</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> myCornerRadius: <span class="type">CGFloat</span> = <span class="number">0.0</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">layer.cornerRadius = myCornerRadius</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> masks : <span class="type">Bool</span> = <span class="literal">true</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">layer.masksToBounds = masks</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> myColor : <span class="type">UIColor</span> = <span class="type">UIColor</span>.red&#123;</div><div class="line"><span class="keyword">didSet</span>&#123;</div><div class="line">backgroundColor = myColor</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样每次通过属性检查器设置属性之后，可以立即查看到自定义View的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-7542a1fd1650c7e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>now，你可以以一种新的方式在组织你的代码了。</p>
<p>不足之处，欢迎指正！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IBInspectable 和 IBDesignable 出现之前，实现圆角这样的效果，可以通过硬编码或者xib／storyBord实例中设置键值编码属性来实现；这两种方式除了需要实时运行程序来查看效果外，通过xib或者storybord来设置键值编码，虽然功能强大，但是一
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Carthage最佳实践</title>
    <link href="http://www.devheminghui.cn/2017/01/08/2016-12-26/"/>
    <id>http://www.devheminghui.cn/2017/01/08/2016-12-26/</id>
    <published>2017-01-08T13:39:31.000Z</published>
    <updated>2017-01-08T15:41:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Carthage是去中心化的第三方包管理工具，和cocoapods有明显区别，两者各有优缺点，须视情况使用。Carthage将第三方包及其依赖下载并编译成动态库的形式，仅此而已，有着灵活，低耦合的特点。cocoapods则在使用上简单，但因为中心化的操作方式，需要依靠服务器，服务器出现问题之后没法继续使用更新。</p>
<h4 id="1-安装Homebrew"><a href="#1-安装Homebrew" class="headerlink" title="1.安装Homebrew"></a>1.安装Homebrew</h4><p>Macos系统普遍使用Homebrew安装Carthage。Homebrew时Macos的软件包管理工具（当然还有其他的，例如皮皮虾），类似于linux系统上的yum，apt-get等，mac上默认不安装Homebrew，需要先自己手动安装。</p>
<p>Homebrew安装很简单，终端输入如下命令就行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<p>注：以上命令如果出错，可能需要梯子</p>
<h4 id="2-安装Carthag-打开终端，输入如下指令"><a href="#2-安装Carthag-打开终端，输入如下指令" class="headerlink" title="2.安装Carthag(打开终端，输入如下指令)"></a>2.安装Carthag(打开终端，输入如下指令)</h4><p>1）终端方式：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>update</div><div class="line"></div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>carthage</div></pre></td></tr></table></figure>
<p>2）pkg方式：<br>除了使用终端安装，也可以下载最新版<a href="">Carthage.pkg</a>(<a href="https://github.com/Carthage/Carthage/releases)来安装" target="_blank" rel="external">https://github.com/Carthage/Carthage/releases)来安装</a></p>
<h4 id="3-Carthag使用"><a href="#3-Carthag使用" class="headerlink" title="3.Carthag使用"></a>3.Carthag使用</h4><p>1）通过终端进入项目目录</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`$ cd <span class="regexp">/Users/</span>FYTech<span class="regexp">/Desktop/</span>MyProject</div></pre></td></tr></table></figure>
<p>2)创建一个名为“Cartfile”的文件</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>touch Cartfile</div></pre></td></tr></table></figure>
<p>3）使用vim 或者xcode打开cartfile文件（使用其他文本编辑器也行）</p>
<p>vim打开</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>vim Cartfile</div></pre></td></tr></table></figure>
<p>xcode打开</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">open</span> -<span class="keyword">a</span> Xcode Cartfile</div></pre></td></tr></table></figure>
<p>4）打开后按以下格式添加第三方库</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">github <span class="string">"Alamofire/Alamofire"</span> &gt; <span class="number">3.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注：<br>3.0 表示使用版本3.0以上但是低于4.0的最新版本，如3.5, 3.9</p>
<p>== 3.0 表示使用3.0版本</p>
<p>= 3.0表示使用3.0或更高的版本</p>
<p>没有指明版本号，会自动使用最新的版本</p>
</blockquote>
<p>5）保存之后，输入以下命令，开始开始下载并编译第三方库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ carthage <span class="keyword">update</span> <span class="comment">--platform iOS</span></div></pre></td></tr></table></figure>
<p>执行完成之后命令之后，项目目录会出现一个“Carthage”文件夹，文件夹下有如下两个子文件夹，“Build”文件夹下包含第三方库对应的.framwork,Checkouts则包含下载的第三方库源文件（如图）<br><img src="http://upload-images.jianshu.io/upload_images/852222-c7c78ba77b31d931.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>使用上述命令时，如果不加<code>--platform iOS</code>，默认会同时编译四种平台的.framwork（效果如图）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/852222-68c8c44026f62edd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>6）在项目中引入需要的第三方库对应的framework文件(需要做一些配置)<br>引入方式和引入一般的framework方式差不多，将Build文件夹下对应的frameworkwork拖到对应区域即可，如图：<br><img src="http://upload-images.jianshu.io/upload_images/852222-f5936e20995c2e30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>此时编译项目，会出现错误提示，还需做做一些配置；</p>
<p>1.点击上图“+”号，选择<code>New Run Script Phase</code>，效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/852222-0986daf8a79d1a28.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>2.新版本之后，上图“1”对应的区域已经不需要再进行配置了，只需要对“2”进行编辑就行。完成之后，编译项目，如果出错，可以按照上图添加“1”试试。</p>
<p>至此，使用Carthage的方法已经介绍完成。</p>
<p>总结：使用Carthage管理第三方库，因为直接引用的是.framework文件，项目中需求变化需要修改第三方库时，可以通过以下两种方式：1）添加对应库的Extention  2)项目中直接使用对应库的源码。</p>
<p>参考链接：<br>1.<a href="http://www.cnblogs.com/lzrabbit/p/4032515.html" target="_blank" rel="external">http://www.cnblogs.com/lzrabbit/p/4032515.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Carthage是去中心化的第三方包管理工具，和cocoapods有明显区别，两者各有优缺点，须视情况使用。Carthage将第三方包及其依赖下载并编译成动态库的形式，仅此而已，有着灵活，低耦合的特点。cocoapods则在使用上简单，但因为中心化的操作方式，需要依靠服务器
    
    </summary>
    
      <category term="iOS" scheme="http://www.devheminghui.cn/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://www.devheminghui.cn/tags/Swift/"/>
    
  </entry>
  
</feed>
